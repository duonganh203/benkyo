---
description: 
globs: 
alwaysApply: true
---
# FSRS Algorithm & Study System

## FSRS Overview
Free Spaced Repetition Scheduler (FSRS) is an advanced spaced repetition algorithm that optimizes learning intervals based on memory models.

## Core Concepts

### Card States
Defined in [benkyo-server/src/schemas/index.ts](mdc:benkyo-server/src/schemas/index.ts):
- **NEW (0)**: Card never studied
- **LEARNING (1)**: Card in initial learning phase
- **REVIEW (2)**: Card mastered, in review phase
- **RELEARNING (3)**: Card failed, being relearned

### Review Ratings
User feedback on card difficulty:
- **AGAIN (1)**: Complete failure, restart learning
- **HARD (2)**: Difficult but correct, shorter interval
- **GOOD (3)**: Standard correct response
- **EASY (4)**: Very easy, longer interval

### FSRS Parameters
User-specific learning parameters stored in User schema:
```typescript
fsrsParams: {
  request_retention: 0.9,      // Target retention rate
  maximum_interval: 36500,     // Max days between reviews
  w: [0.4, 0.6, 2.4, ...],    // 14 weight parameters
  enable_fuzz: false,          // Add randomness to intervals
  enable_short_term: true,     // Enable short-term scheduler
  card_limit: 50,              // Daily new cards limit
  lapses: 8                    // Forgetting threshold
}
```

## Database Schema

### Revlog (Review Log)
Critical for FSRS calculations, stored in [benkyo-server/src/schemas/index.ts](mdc:benkyo-server/src/schemas/index.ts):
```typescript
{
  user: ObjectId,           // Who reviewed
  card: ObjectId,           // Which card
  grade: Number,            // Rating (1-4)
  state: Number,            // Card state after review
  due: Date,                // When card was due
  stability: Number,        // Memory stability
  difficulty: Number,       // Card difficulty
  elapsed_days: Number,     // Days since last review
  last_elapsed_days: Number,// Previous interval
  scheduled_days: Number,   // Next interval
  review: Date,             // When reviewed
  duration: Number          // Time spent reviewing
}
```

### UserDeckState
Per-user settings for each deck:
```typescript
{
  user: ObjectId,
  deck: ObjectId,
  newCardsPerDay: 20,       // Daily new card limit
  reviewsPerDay: 100,       // Daily review limit
  lastStudied: Date,        // Last study session
  stats: {
    streak: Number,         // Current study streak
    totalCards: Number,     // Total cards in deck
    newCards: Number,       // New cards remaining
    learningCards: Number,  // Cards in learning
    reviewCards: Number     // Cards due for review
  }
}
```

## FSRS Service Implementation

### Key Methods in [benkyo-server/src/services/fsrsService.ts](mdc:benkyo-server/src/services/fsrsService.ts):

#### Card Scheduling
```typescript
// Schedule next review based on rating
scheduleCard(card: Card, rating: Rating, user: User): ScheduledCard

// Get cards due for review
getDueCards(userId: string, deckId: string, limit: number): Card[]

// Update card state after review
processReview(userId: string, cardId: string, rating: Rating): ReviewResult
```

#### Algorithm Core
- **Stability Calculation**: How well card is remembered
- **Difficulty Calculation**: Intrinsic card difficulty
- **Interval Calculation**: Days until next review
- **State Transitions**: NEW → LEARNING → REVIEW, with RELEARNING loops

## Study Session Flow

### 1. Session Initialization
```typescript
// Get available cards for study
const newCards = await fsrsService.getNewCards(userId, deckId, newCardLimit);
const reviewCards = await fsrsService.getDueCards(userId, deckId);
const learningCards = await fsrsService.getLearningCards(userId, deckId);
```

### 2. Card Presentation
- Present card front first
- User attempts recall
- Show card back
- User rates difficulty (1-4)

### 3. Review Processing
```typescript
// Process user rating
const result = await fsrsService.processReview(userId, cardId, rating);

// Update statistics
await updateUserStats(userId, result);
await updateDeckStats(deckId, result);
```

### 4. Session Completion
- Record StudySession in database
- Update user streak and statistics
- Calculate session metrics (accuracy, time, etc.)

## Client-Side Study Interface

### Study Component Structure
Main study interface in [benkyo-client/src/pages/study-card.tsx](mdc:benkyo-client/src/pages/study-card.tsx):

```typescript
// Study session state
const [currentCard, setCurrentCard] = useState<Card | null>(null);
const [showAnswer, setShowAnswer] = useState(false);
const [sessionStats, setSessionStats] = useState({
  reviewed: 0,
  correct: 0,
  timeSpent: 0
});

// Handle rating submission
const handleRating = async (rating: Rating) => {
  await submitReview.mutateAsync({
    cardId: currentCard.id,
    rating,
    duration: timeTaken
  });
  
  // Move to next card
  setCurrentCard(getNextCard());
  setShowAnswer(false);
};
```

### Progress Tracking
- Real-time session statistics
- Daily/weekly/monthly progress charts
- Streak tracking and gamification
- Performance analytics per deck

## Advanced Features

### Adaptive Parameters
- FSRS weights can be optimized per user over time
- Machine learning to improve scheduling accuracy
- A/B testing different parameter sets

### Batch Operations
```typescript
// Bulk card processing for imports
processBatchCards(userId: string, cards: CardInput[]): Promise<Card[]>

// Bulk scheduling updates
updateMultipleSchedules(reviews: ReviewInput[]): Promise<void>
```

### Performance Optimization
- Index on due dates for fast queries
- Pagination for large card sets
- Caching frequently accessed parameters
- Background processing for statistics

## Study Methods Integration

### Memory Game
Interactive study mode with drag-and-drop:
- Cards shuffled randomly
- Immediate feedback
- Progress tracking within game

### Quiz Generation
AI-powered quiz creation from deck content:
- Multiple choice questions
- Generated from card front/back content
- Performance tracking separate from FSRS

## Analytics & Insights

### User Progress Metrics
- Retention rates over time
- Learning velocity (cards/day)
- Difficulty distribution
- Time investment analysis

### Deck Performance
- Average card difficulty
- Completion rates
- User engagement metrics
- Success rate by card type

## Troubleshooting Common Issues

### Scheduling Problems
- Verify user FSRS parameters are valid
- Check for corrupted Revlog entries
- Ensure proper state transitions

### Performance Issues
- Monitor database query performance
- Check for N+1 queries in card loading
- Optimize aggregation pipelines for statistics

### Data Consistency
- Validate Revlog integrity
- Ensure UserDeckState synchronization
- Handle concurrent review submissions

