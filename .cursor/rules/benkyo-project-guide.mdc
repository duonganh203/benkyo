---
description: 
globs: 
alwaysApply: true
---
# Benkyo Project Guide

## Project Overview
Benkyo is a full-stack flashcard study application with AI-powered features, built with React/TypeScript frontend and Node.js/Express backend.

## Architecture
- **Client**: [benkyo-client](mdc:benkyo-client) - React/TypeScript SPA with Vite
- **Server**: [benkyo-server](mdc:benkyo-server) - Node.js/Express API with MongoDB
- **Database**: MongoDB with Mongoose schemas in [benkyo-server/src/schemas/index.ts](mdc:benkyo-server/src/schemas/index.ts)

## Key Domain Concepts

### FSRS Algorithm
- Spaced repetition system for optimal learning intervals
- User-specific parameters stored in `fsrsParams` field
- Card states: NEW (0), LEARNING (1), REVIEW (2), RELEARNING (3)
- Ratings: AGAIN (1), HARD (2), GOOD (3), EASY (4)

### User System
- **Basic/Pro/Premium** tiers with feature restrictions
- Pro account management with expiry dates
- User progress tracking and statistics

### Deck Management
- **Public Status**: PRIVATE (0), PENDING (1), APPROVED (2), REJECTED (3)
- Community features with ratings and subscriptions
- Admin review system for public deck approval

## Client Structure

### API Layer
- Centralized API calls in [benkyo-client/src/api/](mdc:benkyo-client/src/api)
- React Query hooks in [benkyo-client/src/hooks/queries/](mdc:benkyo-client/src/hooks/queries)
- Follow pattern: `use-[action]-[resource].ts`

### Component Organization
- **UI Components**: [benkyo-client/src/components/ui/](mdc:benkyo-client/src/components/ui) - Reusable shadcn/ui components
- **Forms**: [benkyo-client/src/components/forms/](mdc:benkyo-client/src/components/forms) - Form components with validation
- **Modals**: [benkyo-client/src/components/modals/](mdc:benkyo-client/src/components/modals) - Modal dialogs
- **Layouts**: [benkyo-client/src/components/layouts/](mdc:benkyo-client/src/components/layouts) - Route protection and layout wrappers

### State Management
- Zustand stores in [benkyo-client/src/hooks/stores/](mdc:benkyo-client/src/hooks/stores)
- Modal state management pattern
- Auth state with JWT token handling

### Key Pages
- [benkyo-client/src/pages/study-card.tsx](mdc:benkyo-client/src/pages/study-card.tsx) - Main study interface
- [benkyo-client/src/pages/deck-detail.tsx](mdc:benkyo-client/src/pages/deck-detail.tsx) - Deck management
- [benkyo-client/src/pages/ai-chat.tsx](mdc:benkyo-client/src/pages/ai-chat.tsx) - Document chat feature

## Server Structure

### Controllers & Services Pattern
- **Controllers**: [benkyo-server/src/controllers/](mdc:benkyo-server/src/controllers) - Request handling, validation
- **Services**: [benkyo-server/src/services/](mdc:benkyo-server/src/services) - Business logic, database operations
- **Routes**: [benkyo-server/src/routes/](mdc:benkyo-server/src/routes) - Route definitions with middleware

### Key Services
- **FSRS Service**: [benkyo-server/src/services/fsrsService.ts](mdc:benkyo-server/src/services/fsrsService.ts) - Spaced repetition algorithm
- **Chat Service**: [benkyo-server/src/services/chatService.ts](mdc:benkyo-server/src/services/chatService.ts) - AI document chat
- **Embedding Service**: [benkyo-server/src/services/embeddingService.ts](mdc:benkyo-server/src/services/embeddingService.ts) - Vector embeddings for documents

### Authentication & Authorization
- JWT-based authentication in [benkyo-server/src/authPassport.ts](mdc:benkyo-server/src/authPassport.ts)
- Middleware: [benkyo-server/src/middlewares/authMiddleware.ts](mdc:benkyo-server/src/middlewares/authMiddleware.ts)
- Pro account checks: [benkyo-server/src/middlewares/proAccountMiddleware.ts](mdc:benkyo-server/src/middlewares/proAccountMiddleware.ts)

## Database Schema Patterns

### Main Entities
- **User**: Authentication, FSRS params, pro status, deck ownership
- **Deck**: Cards container, public/private, community features
- **Card**: Front/back content, belongs to deck
- **Revlog**: Study session history for FSRS algorithm
- **UserDeckState**: Per-user deck settings and progress

### Relationships
- User → owns → Decks → contain → Cards
- User → studies → Cards → generates → Revlog entries
- User ↔ subscribes to → Public Decks

## Development Patterns

### Error Handling
- Custom exception classes in [benkyo-server/src/exceptions/](mdc:benkyo-server/src/exceptions)
- Global error middleware in [benkyo-server/src/middlewares/errorsMiddleware.ts](mdc:benkyo-server/src/middlewares/errorsMiddleware.ts)

### Validation
- Zod schemas in [benkyo-client/src/schemas/](mdc:benkyo-client/src/schemas) (client)
- Validation functions in [benkyo-server/src/validations/](mdc:benkyo-server/src/validations) (server)

### AI Features
- Document processing with vector embeddings
- AI flashcard generation utilities in [benkyo-client/src/utils/](mdc:benkyo-client/src/utils)
- Pinecone integration for vector search

## File Naming Conventions
- **kebab-case** for component files: `ai-flashcard-generator.tsx`
- **camelCase** for hooks: `use-create-deck.ts`
- **PascalCase** for schemas and types
- **camelCase** for service/controller methods

## Development Workflow
- TypeScript strict mode enabled
- ESLint configuration for both client and server
- Docker support with compose file at root
- Environment-based configuration

